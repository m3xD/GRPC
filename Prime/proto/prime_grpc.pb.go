// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: Prime/proto/prime.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetPrimeClient is the client API for GetPrime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetPrimeClient interface {
	Prime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (GetPrime_PrimeClient, error)
}

type getPrimeClient struct {
	cc grpc.ClientConnInterface
}

func NewGetPrimeClient(cc grpc.ClientConnInterface) GetPrimeClient {
	return &getPrimeClient{cc}
}

func (c *getPrimeClient) Prime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (GetPrime_PrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetPrime_ServiceDesc.Streams[0], "/prime.GetPrime/Prime", opts...)
	if err != nil {
		return nil, err
	}
	x := &getPrimePrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetPrime_PrimeClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type getPrimePrimeClient struct {
	grpc.ClientStream
}

func (x *getPrimePrimeClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetPrimeServer is the server API for GetPrime service.
// All implementations must embed UnimplementedGetPrimeServer
// for forward compatibility
type GetPrimeServer interface {
	Prime(*GetRequest, GetPrime_PrimeServer) error
	mustEmbedUnimplementedGetPrimeServer()
}

// UnimplementedGetPrimeServer must be embedded to have forward compatible implementations.
type UnimplementedGetPrimeServer struct {
}

func (UnimplementedGetPrimeServer) Prime(*GetRequest, GetPrime_PrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method Prime not implemented")
}
func (UnimplementedGetPrimeServer) mustEmbedUnimplementedGetPrimeServer() {}

// UnsafeGetPrimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetPrimeServer will
// result in compilation errors.
type UnsafeGetPrimeServer interface {
	mustEmbedUnimplementedGetPrimeServer()
}

func RegisterGetPrimeServer(s grpc.ServiceRegistrar, srv GetPrimeServer) {
	s.RegisterService(&GetPrime_ServiceDesc, srv)
}

func _GetPrime_Prime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetPrimeServer).Prime(m, &getPrimePrimeServer{stream})
}

type GetPrime_PrimeServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type getPrimePrimeServer struct {
	grpc.ServerStream
}

func (x *getPrimePrimeServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GetPrime_ServiceDesc is the grpc.ServiceDesc for GetPrime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetPrime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prime.GetPrime",
	HandlerType: (*GetPrimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Prime",
			Handler:       _GetPrime_Prime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Prime/proto/prime.proto",
}
