// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: Max/proto/max.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetMaxClient is the client API for GetMax service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetMaxClient interface {
	Max(ctx context.Context, opts ...grpc.CallOption) (GetMax_MaxClient, error)
}

type getMaxClient struct {
	cc grpc.ClientConnInterface
}

func NewGetMaxClient(cc grpc.ClientConnInterface) GetMaxClient {
	return &getMaxClient{cc}
}

func (c *getMaxClient) Max(ctx context.Context, opts ...grpc.CallOption) (GetMax_MaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetMax_ServiceDesc.Streams[0], "/grpc.GetMax/Max", opts...)
	if err != nil {
		return nil, err
	}
	x := &getMaxMaxClient{stream}
	return x, nil
}

type GetMax_MaxClient interface {
	Send(*GetNumber) error
	Recv() (*ResponseNumber, error)
	grpc.ClientStream
}

type getMaxMaxClient struct {
	grpc.ClientStream
}

func (x *getMaxMaxClient) Send(m *GetNumber) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getMaxMaxClient) Recv() (*ResponseNumber, error) {
	m := new(ResponseNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetMaxServer is the server API for GetMax service.
// All implementations must embed UnimplementedGetMaxServer
// for forward compatibility
type GetMaxServer interface {
	Max(GetMax_MaxServer) error
	mustEmbedUnimplementedGetMaxServer()
}

// UnimplementedGetMaxServer must be embedded to have forward compatible implementations.
type UnimplementedGetMaxServer struct {
}

func (UnimplementedGetMaxServer) Max(GetMax_MaxServer) error {
	return status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedGetMaxServer) mustEmbedUnimplementedGetMaxServer() {}

// UnsafeGetMaxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetMaxServer will
// result in compilation errors.
type UnsafeGetMaxServer interface {
	mustEmbedUnimplementedGetMaxServer()
}

func RegisterGetMaxServer(s grpc.ServiceRegistrar, srv GetMaxServer) {
	s.RegisterService(&GetMax_ServiceDesc, srv)
}

func _GetMax_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetMaxServer).Max(&getMaxMaxServer{stream})
}

type GetMax_MaxServer interface {
	Send(*ResponseNumber) error
	Recv() (*GetNumber, error)
	grpc.ServerStream
}

type getMaxMaxServer struct {
	grpc.ServerStream
}

func (x *getMaxMaxServer) Send(m *ResponseNumber) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getMaxMaxServer) Recv() (*GetNumber, error) {
	m := new(GetNumber)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetMax_ServiceDesc is the grpc.ServiceDesc for GetMax service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetMax_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GetMax",
	HandlerType: (*GetMaxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Max",
			Handler:       _GetMax_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Max/proto/max.proto",
}
